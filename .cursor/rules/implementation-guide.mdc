---
description: When implementing or updating functionality
globs: 
alwaysApply: false
---
# Implementation Guide

This guide provides instructions for implementing the AudioBookShelf Chapter Marker Refiner.

## Implementation Order

Follow this order when implementing the application:

1. Utility functions (`format_timestamp` and `parse_timestamp`) in [absrefined/utils/timestamp.py](mdc:absrefined/utils/timestamp.py)
2. `AudiobookshelfClient` methods in [absrefined/client/abs_client.py](mdc:absrefined/client/abs_client.py)
3. `AudioTranscriber` methods in [absrefined/transcriber/audio_transcriber.py](mdc:absrefined/transcriber/audio_transcriber.py)
4. `ChapterRefiner` methods in [absrefined/refiner/chapter_refiner.py](mdc:absrefined/refiner/chapter_refiner.py)
5. `ChapterRefinementTool` methods in [absrefined/refinement_tool/chapter_refinement_tool.py](mdc:absrefined/refinement_tool/chapter_refinement_tool.py)

## AudiobookshelfClient Implementation

The `login` method should:
- Make a POST request to `{server_url}/login` with the username and password
- Store the returned token and user ID if successful

The `get_item_details` method should:
- Make a GET request to `{server_url}/api/items/{item_id}` with the auth token
- Return the parsed JSON response

The `get_item_chapters` method should:
- Use `get_item_details` to fetch the item details
- Extract and return the chapters from the response

The `update_item_chapters` method should:
- Make a PATCH request to `{server_url}/api/items/{item_id}/chapters` with the list of chapters
- Return True if the request is successful

## AudioTranscriber Implementation

The `transcribe_audio` method should:
- Use `mlx_whisper.transcribe()` with `word_timestamps=True`
- Write the transcription segments to the output file in JSONL format
- Return the segments

## ChapterRefiner Implementation

The `query_llm` method should:
- Make a POST request to the LLM API with the system and user prompts
- Extract and return the generated text from the response

The `detect_chapter_start` method should:
- First check if the chapter name appears exactly in the transcript
- If found, use that segment's start time
- If not, prepare a prompt for the LLM with the transcript and chapter name
- Query the LLM to determine the precise chapter start
- Parse the timestamp from the LLM response
- Return the detected timestamp, text, and confidence

## ChapterRefinementTool Implementation

The `extract_item_id_from_url` method should:
- Use a regex pattern to extract the item ID from the URL
- Return the item ID if found, None otherwise

The `process_item` method should:
- Fetch the item details and chapters
- For each chapter, stream a segment of audio around the chapter marker (15 seconds before and after)
- Transcribe the audio segment
- Use the LLM to detect the precise chapter start
- Return the original and refined chapters

The `compare_and_update` method should:
- Display the original and refined chapter markers to the user
- Prompt the user to confirm each update
- Update the server with the confirmed changes
